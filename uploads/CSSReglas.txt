
#############
1. Selectores
#############

  * Selector universal: *; todos los elementos del sitio web.

  * Selectores de etiqueta: h1 , p, a, ... con las , se agregan mas etiquetas.

  * Selector descendentes: nos permite seleccionar elementos que esten dentro de otro. selecciona 
                           todos los parrafos dentro un div , aunque tengamos otros elementos de por
			   medio. Ejemplos:  div p (valdria este y el siguiente, sin importar que otros
                           elementos esten de por medio). div article p

  * Selector de clase: .grande, .pequeña, .mediana, class="grande pequeña mediana", las clases se 
                       pueden repetir

  * Selector de id: #id, id="id". El id no se puede repetir. No se debe utilizar en css.

  * Selector de hijos: div > p . Solo los párrafos que sean directos hijos del div. Sin etiquetas
                      de por medio.

  * Selector de atributos: nos permite seleccionar por atributos. input[type] input con el atributo
                           type. input[type="text"] con atributo y valor. 

  * Herencia: estilos que se heredan a sus hijos: fuentes y colores se herecan hacia los hijos. A menos
              de que le digamos los contrario al elemento hijo.


########
2.Fondos   
########

Página web de fondos: https://unsplash.com

Página que comprime un poco el peso de las imagenes: https://tinypng.com

Página para texturas: subtlepatterns.com

Propiedades del fondo, inicialmente se se la queremos añadir a la pagina web, utilizamos la

la etiqueta body, aunque se la podemos añadir a cualquier etiqueta.

-background: black; color, en nombre o por su valor hexadecimal.
             url('img/bg.jpg'); si queremos añadir una imagen: url(dirección de la imagen). Si la 
                               imagen es pequeña, el fondo se vera con la imagen repetida horizontal
                               y verticalmente. Esto se puede corregir si agregamos:
-background-repeat: repeat; (por defecto) pero nosotros le ponemos:
                   no-repeat; otros: repeat-x, repeat-y

-background-size: auto | 100px 100px | 100% 100% | cover | containt;
                  auto: valor por defecto, el ancho y alto de la imagen.
                  ancho y alto: Ancho y alto de que no sotros le especifiquemos. Si solo ponemos, 
                  el primer valor, el segundo será automático.
                  porcentaje: porcentaje del ancho y alto que tendrá el fondo tomando en cuenta 
                  el contenedor padre.
                  cover: ajusta el ancho de la imagen para que avarque el ancho del contenedor padre.
                  contain: ajusta la imagen para que avarque el ancho y alto del contenedor padre.
-background-attachment: scroll(por defecto) | fixed ;
-background-position:center; cuando la imagen no avarca el 100%, la podemos posicionar. 2 valores: 
                      1º el vertical, el 2º el horizontal; center centra, y si lo ponemos en ambas
                      lo hace vertical y horizontalmente.
-background: url('img/bg.jpg') no-repeat fixed center center;
-background-size: 500px;

############
3.Gradientes
############

Páginas con gradientes: https://www.colorzilla.com/gradient-editor/
			https://www.creativosonline.org/sitios-paletas-colores-gradientes-ui.html:
			- WebGradientes
			- UiGradients
			- Blend

#########
4.Enlaces
#########

	- text-decoration: none | underline (subrayado, por defecto) | line-through (tachado);
			   quita el subrayado. No sólo sirve para los enlaces, sirve para cualquier
			   texto, etiquetas p,...
==============
- Pseudoclases
==============

	Sirve para otras etiquetas además de los enlaces a.

	* a:hover { background:#f9a03f; color: #fff  } : Cuando el mouse pasa sobre el enlace a.
	* a:link : estilos para enlaces que no han sido visitados aún. 
	* a:visited: estilos para enlaces visitados.
	* a:active: estilos cuando estamos dando un click

####################
5.Texto y tipografía
####################

	- font-family: Arial, Sans-serif, Helvetica | "Times New Roman" ; cambia la familia de la fuente.
		       Se puede
		       y debe poner varias separadas por coma, por si una no carga, cargue las otras.
		       Se utiliza " cuando tiene varias palabras, o es una fuente creada propia aunque
		       tenga una sola palabra.	
	- font-size: 20px; cambia el tamaño de la fuente
	- font-style: normal | italic ; cambia el tipo de fuente
	- font-wight:normal | bold (negrita)
	- color:#4281ed; cambia el color de la tipografía
	- text-align: left (por defecto) | right | center | justify; modificar la alineación del texto
	- text-decoration: underline | line-through | none (quita cualquier efecto que tengamos)
	- text-transform:uppercase | lowercase | capitalize ; permite transformar el texto a todo
                          mayusculas, minusculas o capital
	- letter-spacing:10px; cambiamos el espaciado entre letras.
	- line-height:30px; cambia la altura entre cada línea

####################
6.Unidades de medida
####################

- Unidades Relativas:
---------------------
	* px - pixel
	* em - Relativa al tamaño de fuente que tenga su elemento padre o el más cercano
	* rem - Relativa al tamaño de fuente especificado en el body
	* % - porcentaje

- Unidades absolutas:
---------------------
	Estas medidas nunca las vas a usar en el diseño web, pero aqui estan para que las conozcas
	in - inches (pulgadas)
	cm - centimetros
	mm - milimetros

###################
7.Unidades de color
###################

- Hay 17 palabras clave que podemos usar:
	aqua, black, blue, fuchsia, gray, green, lime, maroon, navy, olive, orange, purple, red
	silver, teal, white, yellow
- rgb decimal: rgb(215,38,61); rgba(215,38,61,.5) para el 4º valor alfa, que es una transparencia
- Hexadecimal: #56A4FE
- HSV: que es como el RGB pero con %. rgb(84%,15%,24%);
- opacity:; oculta toda la opacidad del elemento, mientras que el a del rgba es la del fondo

################
8.Modelo de caja
################

- Ancho width: ancho de la caja sin contar ni padding ni margin
- Alto height: alto de la caja sin contar ni padding ni margin
- Contenido: contenido de la caja que cuenta ancho y alto
- Margen interno padding: se añade al contenido
- Margen externo margin: se añade al padding y lo separa de otra caja
- Borde border: añadido entre margin y padding

*{ padding:0; margin:0;} elimina todos los padding y margin de todos los elementos

-margin:; 1 valor: arriba y abajo y izquierda y derecha;
	  2 valores: arriba y abajo, izquierda y derecha; 
	  4 valores: arriba, a la derecha, abajo y a la izquierda.	

-margin-top:; arriba
-margin-right:; derecha
-margin-left:; izquierda
-margin-bottom:; abajo

-padding: se puede hacer lo mismo que con el margin
-border: 2px solid #000;

####################
9.Tipos de elementos
####################

- Tipo bloque: abarcan todo el espacio que tienen disponible, div, p, h, ...En ellos se puede manipular
	       el margen, paddin, alto y ancho. No pueden tener otro elemento a su lado, a no ser que
               se le fuerce.
	       Algunos elementos block: 
	       div, article, section, header, footer, aside, table, p, video, ul, ol, h1-h6. Son todos
	       los contenedores.

- Tipo línea: abarcan sólo el espacio que necesitan: enlaces a. No se puede manipular las propiedades
	      de la caja. Pero se pueden convertir para ponerselas. Se ponen uno al lado del otro.
              Algunos elementos inline: a, span, img, b, i, small, cite, code, em, strong, br, script,
	      button, input, label, select, textarea.

- Para solucionar el problema de los enlaces, para poner paddin, margin, width y height, aunque se
		pongan uno al lado del otro. Para ello tenemos una propiedad:

- display: inline (por defecto en los de tipo línea) | block (por defecto en los elementos de tipo 
	   bloque) | inline-block (soluciona las propiedades margin y margenes, alto y ancho, pero 
	   siguen al lado uno del otro) | none (ninguno, desaparecen los elementos y su espacio;
	   con la propiedad: visibility: hidden; desaparece el elemento pero no su espacion que 
            ocupa).


###########################
10.Posicionamiento de cajas
###########################

Tipos de posicionamiento:

	- Normal (static): Posicionamiento por defecto con el que los navegadores acomodan los 
			   elementos.
	- Relativo (relative): Nos permite posicionar una caja y después moverla desde su lugar 
			       original
	- Absoluto (absolute): Nos permite posicionar una caja respecto a su contenedor y el resto 
			      de elementos ignoran la nueva posición.
	- Fijo (fixed): Nos permite posicionar una caja en donde su posición respcto a la pantalla 
			del usuario siempre va a ser la misma.
	- Flotante (float): Nos permite desplazar las cajas todo lo posible hacia la derecha o 
			    izquierda.


	Propiedad:
	- position: static; valor por defecto, y no hay necesidad de escribirlo.
	- position: relative; mueve (empuja) desde su posición original tantos px arriba, abajo, ...
	  respetando el espacio donde estaba antes de ser desplazada por el resto de elementos.
	  
          top:;
	  right:;
	  left:;
	  Bottom:;
	- position: absoluto; Igual que la anterior, pero el resto de elementos no respetan el espacio
			     que ocupa la caja original que se está desplazando. Aqui no se empuja
				la caja, sino que se jala. 

	Si a una caja Padre se le pone posicionamiento relativo a ella no le pasa nada, si no se 
	desplaza, pero a la caja hija, si se le pone posicionamiento absolute, se posiciona con res-
	pecto al padre. 

	Error que se produce con la propiedad float:
	cuando se posicionan dos elementos bloque dentro de un elemento padre, uno a cada lado, el 
	padre no puede abarcar a los dos. Formas de solucionarlo:
	1. Añadimos un elemento hijo más, con una clase clear, a la cual le añadimos la propiedad:
	   clear: both; 
	2. Añadir a la caja padre que las contiene, la propiedad: overflow:hidden;

	Propiedad Overflow:
	overflow: hidden; oculta el texto que se desborda en una caja
		  auto; lo oculta y sale un scroll para bajar en pantalla

	z-index: numero; si es mayor está por delante


##########
11.Flexbox
##########

===================================
- Propiedades para elementos padre:
===================================

  /* alineación horizontal*/
  ==========================

  * display: flex; habilitamos flexbox a nuestros elementos, haciendo flexibles los elementos hijos, 
                   es como si pusieramos un elemento al lado del otro como si utilizaramos float: left;


  * flex-direction: row; Es el valor por defecto, que pone los elementos uno al lado del otro.
                    row-reverse; cambia el orden inverso los elementos hijos
		    column; nos permite poner columnas.
		    column-reverse; pone columnas pero alrevés.
  
  * flex-wrap: no-wrap; valor por defecto: hace que todos los elementos hijos quepan en la misma linea 
                        aunque se tengan que reducir de tamaño. Ancho dinámico de elementos hijos.
               wrap; si no caben los elementos los pone en otra línea.
               wrap-reverse; se empieza por la última línea cambiando el orden

  * flex-flow: row wrap; es la combinación de los dos anteriores permitiendonos poner dos valores.

  * justify-content: flex-start;manipula el espaciado entre los elementos hijos de una línea. Los
                                elementos los posiciona al inicio de la línea hacia la izquierda.
                     flex-end; los posiciona al final de la línea hacia la derecha. 
		     center; centra nuestro contenido. 
                     space-between; divide el espacio sobrante que tenemos entre los hijos entre cada 
                                   uno de los elementos. Y se calcula automáticamente.
		     space-around; divide el espacio entre, al inicio y al final de los elementos.


  /* alineación vertical: cuando disponemos de un alto en el contenedor padre */
  ==============================================================================

  * align-items: flex-start ;
		 flex-end;
                 center;
                 stretch; si los elementos hijos no tienen altura, se la da automáticamente
                 baseline; los ordena segun la fuente.
                 
  * align-content: flex-start; es similar a align-items, pero solo podemos utilizar una de las dos. Pero cuando
                    tenemos más de una línea 
                   flex-end;
                   center;
                   space-between
                   space-arownd

=================================
- Propiedades para elementos hijo 
=================================

  * order:; puedes ponerle el orden a los elementos hijos con números. Muy util en response-design

  * flex-grow:; acepta un número que hace crecer en proporción a los demás. Por defecto todos tienen
                un tamaño de 1. Hace que las cajas ocupen todo el espacio disponible. 

  * flex-shrink:; define la habilidad que va a tener un elemento para hacerse más pequeño. Cuanto
                  se puede hacer más pequeño un elemento en proporción a los demás. Valor 0: no
                  puede hacerse más pequeño del valor puesto de width: ej 200 px, o más, pero no
                  menos. 
  * flex-basis: 200 px; da el valor inicial del elemento, es como el width.

  * flex: 1 1 auto; abarca las 3 propiedades

  * align-self: auto, start, end, center, stretch (alto automático); Centramos solo un elemento de la linea.
